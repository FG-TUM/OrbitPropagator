//
// Created by Oliver on 27.05.21.
//

#pragma once
#include "satellitePropagator/debris/Debris.h"
#include "satellitePropagator/physics/Constants.h"
#include <map>

namespace Acceleration::DragComponent {
/**
 * Table with values for density in different altitudes.
 * Obtained via https://en.wikipedia.org/wiki/NRLMSISE-00
 * Units: altitude[km],  density[kg/m^3]
 */
const std::map<double, double> atmosphericDensityMap {
    // We only care for altitudes > 150km
    // { 78., 1.584426874818746e-05 },
    // { 87.31313131, 5.103100531618111e-06 },
    // { 96.62626263, 0.2036285852445872e-06 },
    // { 105.93939394, 0.61505553819552e-07 },
    // { 115.25252525, 1.8246322614222663e-08 },
    // { 124.56565657, 8.083351848460097e-09 },
    // { 133.87878788, 3.328037928047479e-09 },
    { 143.19191919, 1.382227748398691e-09 },
    { 152.50505051, 0.4212715448991275e-09 },
    { 161.81818182, 7.910291948716065e-10 },
    { 171.13131313, 4.776119027522952e-10 },
    { 180.44444444, 2.836027051562496e-10 },
    { 189.75757576, 1.596290682443936e-10 },
    { 199.07070707, 0.7852473666035706e-10 },
    { 208.38383838, 0.2447358421763255e-10 },
    { 217.6969697, 7.788709343621193e-11 },
    { 227.01010101, 5.277966341228236e-11 },
    { 236.32323232, 3.533108263760077e-11 },
    { 245.63636364, 2.3061095527919804e-11 },
    { 254.94949495, 1.4335906553818454e-11 },
    { 264.26262626, 0.8065562934488355e-11 },
    { 273.57575758, 0.3514411811854643e-11 },
    { 282.88888889, 0.0180141452043046e-11 },
    { 292.2020202, 6.716689266745735e-12 },
    { 301.51515152, 4.8820981939378125e-12 },
    { 310.82828283, 3.506068261578289e-12 },
    { 320.14141414, 2.4673464186646408e-12 },
    { 329.45454545, 1.678722695048652e-12 },
    { 338.76767677, 1.076914595167123e-12 },
    { 348.08080808, 0.6155688982791294e-12 },
    { 357.39393939, 0.260475339555367e-12 },
    { 366.70707071, 8.861819477360867e-13 },
    { 376.02020202, 6.736240034000863e-13 },
    { 385.33333333, 5.084359903922587e-13 },
    { 394.64646465, 3.79727965251725e-13 },
    { 403.95959596, 2.792078413430988e-13 },
    { 413.27272727, 2.0053173491473295e-13 },
    { 422.58585859, 1.3882683482766287e-13 },
    { 431.8989899, 0.903386302737342e-13 },
    { 441.21212121, 0.521651050604908e-13 },
    { 450.52525253, 0.2205563166070577e-13 },
    { 459.83838384, 8.82645022751423e-14 },
    { 469.15151515, 6.942924069121934e-14 },
    { 478.46464646, 5.448860949371735e-14 },
    { 487.77777778, 4.2612624814544345e-14 },
    { 497.09090909, 3.315184616424973e-14 },
    { 506.4040404, 2.569123417494248e-14 },
    { 515.71717172, 1.964543825809303e-14 },
    { 525.03030303, 1.479133468880155e-14 },
    { 534.34343434, 1.0881762641191022e-14 },
    { 543.65656566, 0.7722048532993993e-14 },
    { 552.96969697, 0.515851348252422e-14 },
    { 562.28282828, 0.306993860470014e-14 },
    { 571.5959596, 0.1360422829233621e-14 },
    { 580.90909091, 8.954054216358785e-15 },
    { 590.22222222, 7.790719684841942e-15 },
    { 599.53535354, 6.822686387006471e-15 },
    { 608.84848485, 6.012045363298004e-15 },
    { 618.16161616, 5.328648593541394e-15 },
    { 627.47474747, 4.74846278840772e-15 },
    { 636.78787879, 4.252309004388778e-15 },
    { 646.1010101, 3.824867380084051e-15 },
    { 655.41414141, 3.453855937758353e-15 },
    { 664.72727273, 3.129416484455065e-15 },
    { 674.04040404, 2.8436305326667794e-15 },
    { 683.35353535, 2.590097901444043e-15 },
    { 692.66666667, 2.3636463958526845e-15 },
    { 701.97979798, 2.160087649726768e-15 },
    { 711.29292929, 1.9760032498494116e-15 },
    { 720.60606061, 1.8086026461758866e-15 },
    { 729.91919192, 1.655596732166238e-15 },
    { 739.23232323, 1.515097047864562e-15 },
    { 748.54545455, 1.3855401822084647e-15 },
    { 757.85858586, 1.265626363140384e-15 },
    { 767.17171717, 1.1542639769495456e-15 },
    { 776.48484848, 1.0505348399211263e-15 },
    { 785.7979798, 0.9536634933919146e-15 },
    { 795.11111111, 0.862983745948895e-15 },
    { 804.42424242, 0.7779255444185654e-15 },
    { 813.73737374, 0.6979972920541631e-15 },
    { 823.05050505, 0.6227685902393645e-15 },
    { 832.36363636, 0.5518633563455886e-15 },
    { 841.67676768, 0.4849510357651695e-15 },
    { 850.98989899, 0.4217356963621601e-15 },
    { 860.3030303, 0.3619560284723327e-15 },
    { 869.61616162, 0.3053753922660479e-15 },
    { 878.92929293, 0.251779382528532e-15 },
    { 888.24242424, 0.2009751933851663e-15 },
    { 897.55555556, 0.1527865361038035e-15 },
    { 906.86868687, 0.1070515215123996e-15 },
    { 916.18181818, 0.0636222364825403e-15 },
    { 925.49494949, 0.0223614616767704e-15 },
    { 934.80808081, 8.831421421530018e-16 },
    { 944.12121212, 8.458479167601054e-16 },
    { 953.43434343, 8.103680359402277e-16 },
    { 962.74747475, 7.766022321682375e-16 },
    { 972.06060606, 7.444551083584503e-16 },
    { 981.37373737, 7.138374084140491e-16 },
    { 990.68686869, 6.846666525017951e-16 },
    { 1000., 6.56864701832304e-16 },
    // any density beyond this altitude is considered to be 0
};

/**
 * Estimate the density for a given altitude via linear interpolation between table values given in atmosphericDensityMap.
 * @param altitude
 * @return density
 */
double interpolateDensity(double altitude);

/**
 * @brief Calculates acceleration due to the friction between the object and
 * the earths atmosphere
 *
 * @note Part of the model based on: https://farside.ph.utexas.edu/teaching/celestial/Celestial/node94.html
 *
 * @param d Reference to the Debris::Debris object to apply the acceleration to
 * @param acc_drag Reference to an 3D vector to write the result for this
 * Acceleration::AccelerationComponent.
 * @param acc_total Reference to an 3D vector to accumulate the accelerations
 * for all applied Acceleration::AccelerationComponent.
 */
template <class D>
auto apply(const D& d)
{
    // aliases
    const auto& vObj = d.getVelocity();
    const auto& pObj = d.getPosition();

    // Thesis Equation 2.31
    const std::array<double, 3> vRel {
        vObj[0] + Physics::ROT_ATMOSPHERE * pObj[1],
        vObj[1] - Physics::ROT_ATMOSPHERE * pObj[0],
        vObj[2],
    };

    const auto vNorm = MathUtils::euclideanNorm(vRel);
    // calculate atmospheric density. This replaces Equation 10.131 / Thesis Equation 2.33
    const double p = interpolateDensity(d.getHeight() - Physics::R_EARTH);
    // Equation 10.130 / Thesis Equation 2.30
    const auto factor = -0.5 * p * d.getBcInv() * vNorm;
    return std::array<double, 3> {
        vRel[0] * factor,
        vRel[1] * factor,
        vRel[2] * factor,
    };
}
} // namespace Acceleration